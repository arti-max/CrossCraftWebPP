#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ —É–º–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –æ–±—Ö–æ–¥–∞
"""

import requests
import random
import string
import time
from datetime import datetime

BASE_URL = "http://crosscraftweb.ddns.net"
REGISTER_URL = f"{BASE_URL}/register.jsp"
ATTEMPTS = 100

stats = {
    'total': 0,
    'success': 0,
    'blocked': 0,
    'errors': {}
}

# –†–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
REAL_NAMES = [
    "Alex", "Bob", "Charlie", "David", "Eve", "Frank", "Grace", "Helen",
    "Igor", "Jack", "Kate", "Leo", "Mary", "Nick", "Olivia", "Paul",
    "Quinn", "Rose", "Sam", "Tina", "Uma", "Vince", "Wade", "Xena",
    "Yuri", "Zoe", "Anna", "Ben", "Clara", "Dan", "Emma", "Fred"
]

# –†–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è email
REAL_WORDS = [
    "dev", "user", "admin", "test", "player", "gamer", "coder", "ninja",
    "master", "pro", "king", "queen", "star", "hero", "legend", "champion"
]

def generate_smart_username():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π username, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π"""
    patterns = [
        # –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è + —Ü–∏—Ñ—Ä–∞ –∏–ª–∏ –¥–≤–µ
        lambda: random.choice(REAL_NAMES) + str(random.randint(1, 99)),
        
        # –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è + —Å–ª–æ–≤–æ
        lambda: random.choice(REAL_NAMES) + random.choice(REAL_WORDS).capitalize(),
        
        # –°–ª–æ–≤–æ + —Ü–∏—Ñ—Ä–∞
        lambda: random.choice(REAL_WORDS) + str(random.randint(10, 999)),
        
        # –î–≤–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤–∞
        lambda: random.choice(REAL_WORDS) + random.choice(REAL_WORDS),
        
        # –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ–º
        lambda: random.choice(REAL_NAMES).lower() + "_" + random.choice(REAL_WORDS),
        
        # CamelCase
        lambda: random.choice(REAL_NAMES) + random.choice(REAL_NAMES),
        
        # –õ–µ–≥–∏—Ç–∏–º–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —Å —á–∏—Å–ª–∞–º–∏ (–Ω–æ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ)
        lambda: random.choice(REAL_WORDS) + random.choice(['x', 'z', 'r']) + str(random.randint(1, 9)),
    ]
    
    return random.choice(patterns)()

def generate_smart_email():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π email, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π"""
    
    # –õ–µ–≥–∏—Ç–∏–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    domains = ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com', 'icloud.com']
    
    patterns = [
        # –ò–º—è.—Ñ–∞–º–∏–ª–∏—è@–¥–æ–º–µ–Ω
        lambda: random.choice(REAL_NAMES).lower() + '.' + 
                random.choice(REAL_NAMES).lower() + '@' + 
                random.choice(domains),
        
        # –∏–º—è_—Å–ª–æ–≤–æ@–¥–æ–º–µ–Ω
        lambda: random.choice(REAL_NAMES).lower() + '_' + 
                random.choice(REAL_WORDS) + '@' + 
                random.choice(domains),
        
        # —Å–ª–æ–≤–æ.—Ü–∏—Ñ—Ä–∞@–¥–æ–º–µ–Ω (–Ω–µ –º–Ω–æ–≥–æ —Ü–∏—Ñ—Ä)
        lambda: random.choice(REAL_WORDS) + '.' + 
                str(random.randint(1, 99)) + '@' + 
                random.choice(domains),
        
        # –∏–º—è—Å–ª–æ–≤–æ@–¥–æ–º–µ–Ω
        lambda: random.choice(REAL_NAMES).lower() + 
                random.choice(REAL_WORDS) + '@' + 
                random.choice(domains),
        
        # —Å–ª–æ–≤–æ-—Å–ª–æ–≤–æ@–¥–æ–º–µ–Ω
        lambda: random.choice(REAL_WORDS) + '-' + 
                random.choice(REAL_WORDS) + '@' + 
                random.choice(domains),
    ]
    
    email = random.choice(patterns)()
    
    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ email –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    local = email.split('@')[0]
    if len(local) > 12:
        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º
        local = local[:12]
        email = local + '@' + email.split('@')[1]
    
    return email

def generate_legit_password():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
    patterns = [
        lambda: random.choice(REAL_WORDS) + str(random.randint(100, 999)),
        lambda: random.choice(REAL_NAMES) + str(random.randint(1000, 9999)),
        lambda: ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(8, 12))),
    ]
    return random.choice(patterns)()

def attempt_registration(username, email, password):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
    data = {
        'name': username,
        'email': email,
        'password': password,
        'password_again': password
    }
    
    try:
        response = requests.post(REGISTER_URL, data=data, allow_redirects=False, timeout=5)
        
        if response.status_code == 302:
            location = response.headers.get('Location', '')
            if 'login' in location:
                return 'success', 'Registered successfully ‚ö†Ô∏è'
            else:
                return 'blocked', 'Redirected elsewhere'
        
        elif response.status_code == 200:
            text = response.text.lower()
            if 'suspicious' in text:
                return 'blocked', 'Detected as suspicious'
            elif 'temporary email' in text:
                return 'blocked', 'Temporary email blocked'
            elif 'too many' in text:
                return 'blocked', 'Rate limited'
            else:
                return 'blocked', 'Unknown block (200)'
        
        elif response.status_code == 400:
            return 'blocked', 'HTTP 400 (validation error)'
        
        elif response.status_code == 403:
            return 'blocked', 'HTTP 403 (forbidden)'
        
        elif response.status_code == 429:
            return 'blocked', 'HTTP 429 (rate limited)'
        
        else:
            return 'error', f'HTTP {response.status_code}'
    
    except requests.exceptions.RequestException as e:
        return 'error', f'Network error: {str(e)[:30]}'

def print_progress_bar(current, total, status):
    bar_length = 40
    filled = int(bar_length * current / total)
    bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
    percent = current / total * 100
    print(f'\r[{bar}] {percent:.1f}% | {current}/{total} | {status}', end='', flush=True)

def main():
    print("=" * 70)
    print("üß† CROSSCRAFT ADVANCED SPAM PROTECTION TEST")
    print("=" * 70)
    print(f"Target:   {BASE_URL}")
    print(f"Attempts: {ATTEMPTS}")
    print(f"Strategy: Smart username/email generation with legitimate patterns")
    print("=" * 70)
    print()
    
    start_time = time.time()
    successful_accounts = []
    
    for i in range(1, ATTEMPTS + 1):
        username = generate_smart_username()
        email = generate_smart_email()
        password = generate_legit_password()
        
        stats['total'] += 1
        
        result, reason = attempt_registration(username, email, password)
        
        if result == 'success':
            stats['success'] += 1
            status_emoji = '‚ö†Ô∏è '
            successful_accounts.append((username, email))
        elif result == 'blocked':
            stats['blocked'] += 1
            status_emoji = 'üö´'
            stats['errors'][reason] = stats['errors'].get(reason, 0) + 1
        else:
            status_emoji = '‚ùå'
            stats['errors'][reason] = stats['errors'].get(reason, 0) + 1
        
        status_text = f"{status_emoji} {username[:18]:<18} | {email[:30]:<30}"
        print_progress_bar(i, ATTEMPTS, status_text)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ + —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ rate limit
        time.sleep(random.uniform(0.2, 0.5))
    
    elapsed_time = time.time() - start_time
    
    print("\n")
    print("=" * 70)
    print("üìä RESULTS")
    print("=" * 70)
    print(f"Total attempts:     {stats['total']}")
    print(f"‚úÖ Successful:       {stats['success']} ({stats['success']/stats['total']*100:.1f}%)")
    print(f"üö´ Blocked:          {stats['blocked']} ({stats['blocked']/stats['total']*100:.1f}%)")
    print(f"‚è±Ô∏è  Time elapsed:     {elapsed_time:.2f}s")
    print(f"‚ö° Rate:             {stats['total']/elapsed_time:.2f} req/s")
    print()
    
    if successful_accounts:
        print("=" * 70)
        print("‚ö†Ô∏è  SUCCESSFUL SPAM ACCOUNTS (SECURITY ISSUE!)")
        print("=" * 70)
        for username, email in successful_accounts:
            print(f"  {username:<20} | {email}")
        print()
    
    if stats['errors']:
        print("=" * 70)
        print("üîç BLOCK REASONS")
        print("=" * 70)
        for reason, count in sorted(stats['errors'].items(), key=lambda x: x[1], reverse=True):
            print(f"  {count:3d}x  {reason}")
        print()
    
    print("=" * 70)
    print("üéØ VERDICT")
    print("=" * 70)
    
    success_rate = stats['success'] / stats['total'] * 100
    
    if success_rate == 0:
        print("‚úÖ EXCELLENT: All advanced spam attempts were blocked!")
        print("   Protection is working perfectly against smart attackers.")
    elif success_rate < 5:
        print("‚úÖ GOOD: Protection is strong (< 5% bypass rate)")
        print("   Minor improvements recommended.")
    elif success_rate < 10:
        print("‚ö†Ô∏è  WARNING: Some smart spam got through (< 10% bypass)")
        print("   Consider strengthening validation rules.")
    elif success_rate < 20:
        print("‚ö†Ô∏è  CRITICAL: Significant bypass rate (< 20%)")
        print("   Protection needs improvement!")
    else:
        print("‚ùå CRITICAL: Protection is weak against smart attackers!")
        print("   Immediate action required!")
    
    print("=" * 70)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Test interrupted by user")
    except Exception as e:
        print(f"\n\n‚ùå Error: {e}")
