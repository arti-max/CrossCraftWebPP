#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–¥—Å—á—ë—Ç–æ–º —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python tree_project.py [–ø—É—Ç—å] [--exclude dir1,dir2]
"""

import os
import sys
from pathlib import Path

# –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
DEFAULT_IGNORE = {
    '.git', '.vscode', '.idea', 'node_modules', 'build', 'dist',
    '__pycache__', '.cache', '.DS_Store', 'CMakeFiles',
    '.gitignore', '.gitmodules', 'cmake_install.cmake',
    'CMakeCache.txt', 'Makefile', '*.o', '*.a', '*.so', '*.exe'
}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç—Ä–æ–∫
CODE_EXTENSIONS = {
    '.cpp', '.hpp', '.h', '.c', '.cc', '.cxx',
    '.py', '.js', '.ts', '.tsx', '.jsx',
    '.java', '.cs', '.go', '.rs', '.swift',
    '.php', '.rb', '.pl', '.sh', '.bash',
    '.html', '.css', '.scss', '.sass',
    '.json', '.xml', '.yaml', '.yml',
    '.md', '.txt', '.cmake', '.makefile'
}

def should_ignore(path, ignore_patterns):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å"""
    name = path.name
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    if name in ignore_patterns:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä *.o)
    for pattern in ignore_patterns:
        if '*' in pattern:
            if pattern.startswith('*') and name.endswith(pattern[1:]):
                return True
            if pattern.endswith('*') and name.startswith(pattern[:-1]):
                return True
    
    return False

def count_lines(file_path):
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (total_lines, code_lines, empty_lines, comment_lines)
    """
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
            
        total = len(lines)
        empty = sum(1 for line in lines if line.strip() == '')
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á—ë—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–Ω–µ –∏–¥–µ–∞–ª–µ–Ω, –Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
        comments = sum(1 for line in lines 
                      if line.strip().startswith('//') or 
                         line.strip().startswith('#') or
                         line.strip().startswith('/*') or
                         line.strip().startswith('*'))
        
        code = total - empty - comments
        
        return total, code, empty, comments
    except:
        return 0, 0, 0, 0

def is_code_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–æ–¥–æ–º"""
    return file_path.suffix.lower() in CODE_EXTENSIONS

def format_size(size):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size < 1024.0:
            return f"{size:.1f}{unit}"
        size /= 1024.0
    return f"{size:.1f}TB"

def get_tree(path, prefix="", ignore_patterns=None, max_depth=None, current_depth=0, stats=None):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥—Å—á—ë—Ç–æ–º —Å—Ç—Ä–æ–∫
    
    Args:
        path: –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        prefix: –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
        ignore_patterns: –Ω–∞–±–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        max_depth: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞
        current_depth: —Ç–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞
        stats: —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    if ignore_patterns is None:
        ignore_patterns = DEFAULT_IGNORE
    
    if stats is None:
        stats = {
            'total_files': 0,
            'code_files': 0,
            'total_lines': 0,
            'code_lines': 0,
            'empty_lines': 0,
            'comment_lines': 0,
            'total_size': 0
        }
    
    if max_depth is not None and current_depth >= max_depth:
        return [], stats
    
    lines = []
    path = Path(path)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        items = sorted(path.iterdir(), key=lambda x: (not x.is_dir(), x.name.lower()))
        items = [item for item in items if not should_ignore(item, ignore_patterns)]
        
        for i, item in enumerate(items):
            is_last = (i == len(items) - 1)
            
            # –°–∏–º–≤–æ–ª—ã –¥–µ—Ä–µ–≤–∞
            connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
            extension = "    " if is_last else "‚îÇ   "
            
            if item.is_dir():
                lines.append(f"{prefix}{connector}{item.name}/")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –ø–∞–ø–∫—É
                sublines, stats = get_tree(
                    item, 
                    prefix + extension, 
                    ignore_patterns,
                    max_depth,
                    current_depth + 1,
                    stats
                )
                lines.extend(sublines)
            else:
                stats['total_files'] += 1
                size = item.stat().st_size
                stats['total_size'] += size
                size_str = format_size(size)
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
                if is_code_file(item):
                    stats['code_files'] += 1
                    total, code, empty, comments = count_lines(item)
                    stats['total_lines'] += total
                    stats['code_lines'] += code
                    stats['empty_lines'] += empty
                    stats['comment_lines'] += comments
                    
                    lines.append(f"{prefix}{connector}{item.name} ({size_str}, {total} lines)")
                else:
                    lines.append(f"{prefix}{connector}{item.name} ({size_str})")
    
    except PermissionError:
        lines.append(f"{prefix}[Permission Denied]")
    
    return lines, stats

def print_tree(path, ignore=None, max_depth=None, show_stats=True):
    """
    –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥—Å—á—ë—Ç–æ–º —Å—Ç—Ä–æ–∫
    """
    path = Path(path)
    
    if not path.exists():
        print(f"–û—à–∏–±–∫–∞: –ø—É—Ç—å {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    ignore_patterns = DEFAULT_IGNORE.copy()
    if ignore:
        ignore_patterns.update(ignore)
    
    # –í—ã–≤–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    print(f"\nüìÅ {path.absolute()}")
    print("‚îÄ" * 80)
    
    # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
    stats = {
        'total_files': 0,
        'code_files': 0,
        'total_lines': 0,
        'code_lines': 0,
        'empty_lines': 0,
        'comment_lines': 0,
        'total_size': 0
    }
    
    tree_lines, stats = get_tree(path, "", ignore_patterns, max_depth, 0, stats)
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ä–µ–≤–æ
    for line in tree_lines:
        print(line)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if show_stats:
        print("‚îÄ" * 80)
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
        print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ —Å –∫–æ–¥–æ–º: {stats['code_files']}")
        print(f"   ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {format_size(stats['total_size'])}")
        print()
        print(f"üìù –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total_lines']:,}")
        print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {stats['code_lines']:,}")
        print(f"   ‚Ä¢ –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {stats['empty_lines']:,}")
        print(f"   ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comment_lines']:,}")
        
        if stats['total_lines'] > 0:
            code_percent = (stats['code_lines'] / stats['total_lines']) * 100
            empty_percent = (stats['empty_lines'] / stats['total_lines']) * 100
            comment_percent = (stats['comment_lines'] / stats['total_lines']) * 100
            print()
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:")
            print(f"   ‚Ä¢ –ö–æ–¥: {code_percent:.1f}%")
            print(f"   ‚Ä¢ –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: {empty_percent:.1f}%")
            print(f"   ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comment_percent:.1f}%")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–¥—Å—á—ë—Ç–æ–º —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python tree_project.py                    # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
  python tree_project.py /path/to/project   # –£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
  python tree_project.py --depth 2          # –ú–∞–∫—Å–∏–º—É–º 2 —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  python tree_project.py --exclude "test,tmp"  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å test –∏ tmp
  python tree_project.py --no-stats         # –ë–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  python tree_project.py -o tree.txt        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
        """
    )
    
    parser.add_argument(
        'path',
        nargs='?',
        default='.',
        help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)'
    )
    
    parser.add_argument(
        '--depth', '-d',
        type=int,
        default=None,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏'
    )
    
    parser.add_argument(
        '--exclude', '-e',
        type=str,
        default='',
        help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'
    )
    
    parser.add_argument(
        '--no-stats',
        action='store_true',
        help='–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'
    )
    
    parser.add_argument(
        '--output', '-o',
        type=str,
        default=None,
        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª'
    )
    
    args = parser.parse_args()
    
    # –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    extra_ignore = set()
    if args.exclude:
        extra_ignore = set(args.exclude.split(','))
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.output:
        original_stdout = sys.stdout
        sys.stdout = open(args.output, 'w', encoding='utf-8')
    
    try:
        print_tree(
            args.path,
            ignore=extra_ignore,
            max_depth=args.depth,
            show_stats=not args.no_stats
        )
    finally:
        if args.output:
            sys.stdout.close()
            sys.stdout = original_stdout
            print(f"‚úÖ –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {args.output}")

if __name__ == '__main__':
    main()
